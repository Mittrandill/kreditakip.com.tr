import { jsPDF } from "jspdf"
import type { Credit, Bank, CreditType, PaymentPlan, PaymentHistory } from "@/lib/types"

interface CreditReportData {
  credit: Credit & {
    banks: Pick<Bank, "id" | "name" | "logo_url" | "contact_phone" | "contact_email" | "website"> | null
    credit_types: Pick<CreditType, "id" | "name" | "description"> | null
  }
  paymentPlans: PaymentPlan[]
  paymentHistory: PaymentHistory[]
  dynamicStats: {
    remainingDebt: number
    remainingInstallments: number
    paymentProgress: number
    paidInstallments: number
  }
}

// Renk paleti - Modern ve elit
const colors = {
  primary: "#1E40AF", // Blue-800
  secondary: "#059669", // Emerald-600
  accent: "#7C3AED", // Violet-600
  dark: "#1F2937", // Gray-800
  medium: "#6B7280", // Gray-500
  light: "#F9FAFB", // Gray-50
  white: "#FFFFFF",
  success: "#059669",
  warning: "#D97706",
  danger: "#DC2626",
}

// Logo SVG'yi base64'e çevir
const logoSvgBase64 = `data:image/svg+xml;base64,${btoa(`
<svg width="120" height="40" viewBox="0 0 120 40" fill="none" xmlns="http://www.w3.org/2000/svg">
  <rect width="120" height="40" rx="8" fill="#14B8A6"/>
  <text x="60" y="25" text-anchor="middle" fill="white" font-family="Arial, sans-serif" font-size="16" font-weight="bold">KrediTakip</text>
</svg>
`)}`

class ElitePDFGenerator {
  private doc: jsPDF
  private pageWidth: number
  private pageHeight: number
  private margin: number
  private currentY: number
  private pageNumber: number

  constructor() {
    this.doc = new jsPDF("p", "mm", "a4")
    this.pageWidth = this.doc.internal.pageSize.getWidth()
    this.pageHeight = this.doc.internal.pageSize.getHeight()
    this.margin = 20
    this.currentY = this.margin
    this.pageNumber = 1
  }

  // Akıllı sayfa kontrolü
  private checkPageBreak(requiredHeight: number): boolean {
    if (this.currentY + requiredHeight > this.pageHeight - 30) {
      this.addNewPage()
      return true
    }
    return false
  }

  // Yeni sayfa ekle
  private addNewPage() {
    this.doc.addPage()
    this.pageNumber++
    this.currentY = this.margin
    this.addHeader()
    this.addFooter()
  }

  // Elit header tasarımı
  private addHeader() {
    // Gradient background simulation
    this.doc.setFillColor(248, 250, 252) // Slate-50
    this.doc.rect(0, 0, this.pageWidth, 25, "F")

    // Logo placeholder (gerçek logo için base64 kullanılabilir)
    this.doc.setFillColor(255, 255, 255)
    this.doc.roundedRect(this.margin, 5, 30, 15, 3, 3, "F")

    // Logo text
    this.doc.setTextColor(20, 184, 166)
    this.doc.setFontSize(12)
    this.doc.setFont("helvetica", "bold")
    this.doc.text("KrediTakip", this.margin + 2, 14)

    // Header title
    this.doc.setTextColor(31, 41, 55)
    this.doc.setFontSize(16)
    this.doc.text("KREDİ RAPORU", this.pageWidth - this.margin, 14, { align: "right" })

    // Separator line
    this.doc.setDrawColor(229, 231, 235)
    this.doc.setLineWidth(0.5)
    this.doc.line(this.margin, 22, this.pageWidth - this.margin, 22)

    this.currentY = 35
  }

  // Elit footer tasarımı
  private addFooter() {
    const footerY = this.pageHeight - 20

    // Footer background
    this.doc.setFillColor(249, 250, 251) // Gray-50
    this.doc.rect(0, footerY - 5, this.pageWidth, 25, "F")

    // Separator line
    this.doc.setDrawColor(229, 231, 235) // Gray-200
    this.doc.setLineWidth(0.3)
    this.doc.line(this.margin, footerY - 5, this.pageWidth - this.margin, footerY - 5)

    // Footer content
    this.doc.setTextColor(107, 114, 128) // Gray-500
    this.doc.setFontSize(8)
    this.doc.setFont("helvetica", "normal")

    // Left side - generation info
    const now = new Date()
    const dateStr = now.toLocaleDateString("tr-TR", {
      year: "numeric",
      month: "long",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    })
    this.doc.text(`Rapor Tarihi: ${dateStr}`, this.margin, footerY + 2)
    this.doc.text("This report was automatically generated by KrediTakip.", this.margin, footerY + 7)

    // Right side - page number
    this.doc.setFont("helvetica", "bold")
    this.doc.text(`Sayfa ${this.pageNumber}`, this.pageWidth - this.margin, footerY + 2, { align: "right" })

    // Company info
    this.doc.setFont("helvetica", "normal")
    this.doc.text("www.kreditakip.com.tr", this.pageWidth - this.margin, footerY + 7, { align: "right" })
  }

  // Kapak sayfası
  private addCoverPage(data: CreditReportData) {
    // Hero section background
    this.doc.setFillColor(20, 184, 166) // Teal-500
    this.doc.rect(0, 0, this.pageWidth, 100, "F")

    // Main title
    this.doc.setTextColor(255, 255, 255)
    this.doc.setFontSize(32)
    this.doc.setFont("helvetica", "bold")
    this.doc.text("KREDİ RAPORU", this.pageWidth / 2, 50, { align: "center" })

    // Subtitle
    this.doc.setFontSize(16)
    this.doc.setFont("helvetica", "normal")
    this.doc.text("Detayli Analiz ve Istatistikler", this.pageWidth / 2, 65, { align: "center" })

    // Credit info card
    const cardY = 120
    this.doc.setFillColor(255, 255, 255)
    this.doc.roundedRect(this.margin, cardY, this.pageWidth - 2 * this.margin, 60, 5, 5, "F")

    // Card shadow effect
    this.doc.setFillColor(0, 0, 0, 0.1)
    this.doc.roundedRect(this.margin + 1, cardY + 1, this.pageWidth - 2 * this.margin, 60, 5, 5, "F")
    this.doc.setFillColor(255, 255, 255)
    this.doc.roundedRect(this.margin, cardY, this.pageWidth - 2 * this.margin, 60, 5, 5, "F")

    // Card content
    this.doc.setTextColor(31, 41, 55) // Gray-800
    this.doc.setFontSize(18)
    this.doc.setFont("helvetica", "bold")
    this.doc.text("Kredi Bilgileri", this.margin + 10, cardY + 15)

    this.doc.setFontSize(12)
    this.doc.setFont("helvetica", "normal")
    this.doc.setTextColor(107, 114, 128) // Gray-500

    const creditInfo = [
      ["Kredi Kodu:", data.credit.credit_code],
      ["Banka:", data.credit.banks?.name || "N/A"],
      ["Kredi Turu:", data.credit.credit_types?.name || "N/A"],
      ["Baslangic Tutari:", this.formatCurrency(data.credit.initial_amount)],
    ]

    let infoY = cardY + 30
    creditInfo.forEach(([label, value]) => {
      this.doc.setFont("helvetica", "bold")
      this.doc.text(label, this.margin + 10, infoY)
      this.doc.setFont("helvetica", "normal")
      this.doc.text(value, this.margin + 60, infoY)
      infoY += 8
    })

    // Stats cards
    const statsY = 200
    const cardWidth = (this.pageWidth - 2 * this.margin - 30) / 4
    const stats = [
      { label: "Kalan Borc", value: this.formatCurrency(data.dynamicStats.remainingDebt), color: colors.danger },
      { label: "Odenen Taksit", value: data.dynamicStats.paidInstallments.toString(), color: colors.success },
      {
        label: "Kalan Taksit",
        value: data.dynamicStats.remainingInstallments.toString(),
        color: colors.warning,
      },
      { label: "Ilerleme", value: `${Math.round(data.dynamicStats.paymentProgress)}%`, color: colors.primary },
    ]

    stats.forEach((stat, index) => {
      const x = this.margin + index * (cardWidth + 10)

      // Card background
      this.doc.setFillColor(255, 255, 255)
      this.doc.roundedRect(x, statsY, cardWidth, 40, 3, 3, "F")

      // Card border
      this.doc.setDrawColor(229, 231, 235) // Gray-200
      this.doc.setLineWidth(0.5)
      this.doc.roundedRect(x, statsY, cardWidth, 40, 3, 3, "S")

      // Colored top border
      this.doc.setFillColor(stat.color)
      this.doc.roundedRect(x, statsY, cardWidth, 3, 3, 3, "F")

      // Content
      this.doc.setTextColor(107, 114, 128)
      this.doc.setFontSize(8)
      this.doc.setFont("helvetica", "normal")
      this.doc.text(stat.label, x + cardWidth / 2, statsY + 15, { align: "center" })

      this.doc.setTextColor(31, 41, 55)
      this.doc.setFontSize(14)
      this.doc.setFont("helvetica", "bold")
      this.doc.text(stat.value, x + cardWidth / 2, statsY + 28, { align: "center" })
    })

    this.currentY = 260
  }

  // Ödeme planı tablosu
  private addPaymentPlanTable(paymentPlans: PaymentPlan[]) {
    this.checkPageBreak(40)

    // Section title
    this.doc.setTextColor(31, 41, 55)
    this.doc.setFontSize(18)
    this.doc.setFont("helvetica", "bold")
    this.doc.text("ODEME PLANI", this.margin, this.currentY)
    this.currentY += 15

    // Table setup
    const tableWidth = this.pageWidth - 2 * this.margin
    const colWidths = [15, 25, 30, 30, 25, 25, 20] // Taksit, Vade, Ana Para, Faiz, Toplam, Kalan, Durum
    const rowHeight = 8
    const headerHeight = 12

    // Table header
    this.doc.setFillColor(20, 184, 166) // Teal-500
    this.doc.rect(this.margin, this.currentY, tableWidth, headerHeight, "F")

    this.doc.setTextColor(255, 255, 255)
    this.doc.setFontSize(9)
    this.doc.setFont("helvetica", "bold")

    const headers = ["Taksit", "Vade Tarihi", "Ana Para", "Faiz", "Toplam", "Kalan Borc", "Durum"]
    let headerX = this.margin + 2

    headers.forEach((header, index) => {
      this.doc.text(header, headerX, this.currentY + 8)
      headerX += colWidths[index]
    })

    this.currentY += headerHeight

    // Table rows
    paymentPlans.forEach((plan, index) => {
      this.checkPageBreak(rowHeight + 2)

      // Alternating row colors
      if (index % 2 === 0) {
        this.doc.setFillColor(249, 250, 251) // Gray-50
        this.doc.rect(this.margin, this.currentY, tableWidth, rowHeight, "F")
      }

      // Status-based row highlighting
      if (plan.status === "paid") {
        this.doc.setFillColor(236, 253, 245) // Emerald-50
        this.doc.rect(this.margin, this.currentY, tableWidth, rowHeight, "F")
      } else if (plan.status === "overdue") {
        this.doc.setFillColor(254, 242, 242) // Red-50
        this.doc.rect(this.margin, this.currentY, tableWidth, rowHeight, "F")
      }

      // Row data
      this.doc.setTextColor(31, 41, 55)
      this.doc.setFontSize(8)
      this.doc.setFont("helvetica", "normal")

      const rowData = [
        plan.installment_number.toString(),
        new Date(plan.due_date).toISOString().split("T")[0],
        this.formatCurrency(plan.principal_amount),
        this.formatCurrency(plan.interest_amount),
        this.formatCurrency(plan.total_payment),
        this.formatCurrency(plan.remaining_debt),
        this.getStatusText(plan.status),
      ]

      let cellX = this.margin + 2
      rowData.forEach((data, colIndex) => {
        // Status column with color
        if (colIndex === 6) {
          this.doc.setTextColor(this.getStatusColor(plan.status))
          this.doc.setFont("helvetica", "bold")
        } else {
          this.doc.setTextColor(31, 41, 55)
          this.doc.setFont("helvetica", "normal")
        }

        this.doc.text(data, cellX, this.currentY + 5)
        cellX += colWidths[colIndex]
      })

      this.currentY += rowHeight
    })

    // Table border
    this.doc.setDrawColor(229, 231, 235)
    this.doc.setLineWidth(0.5)
    this.doc.rect(
      this.margin,
      this.currentY - paymentPlans.length * rowHeight - headerHeight,
      tableWidth,
      paymentPlans.length * rowHeight + headerHeight,
      "S",
    )

    this.currentY += 10
  }

  // Ödeme geçmişi
  private addPaymentHistory(paymentHistory: PaymentHistory[]) {
    if (paymentHistory.length === 0) return

    this.checkPageBreak(40)

    // Section title
    this.doc.setTextColor(31, 41, 55)
    this.doc.setFontSize(18)
    this.doc.setFont("helvetica", "bold")
    this.doc.text("ODEME GECMISI", this.margin, this.currentY)
    this.currentY += 15

    // Payment cards
    paymentHistory.slice(0, 10).forEach((payment, index) => {
      this.checkPageBreak(25)

      // Card background
      this.doc.setFillColor(255, 255, 255)
      this.doc.roundedRect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, 20, 3, 3, "F")

      // Card border
      this.doc.setDrawColor(229, 231, 235)
      this.doc.setLineWidth(0.5)
      this.doc.roundedRect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, 20, 3, 3, "S")

      // Success indicator
      this.doc.setFillColor(16, 185, 129) // Emerald-500
      this.doc.circle(this.margin + 8, this.currentY + 10, 3, "F")

      // Payment info
      this.doc.setTextColor(31, 41, 55)
      this.doc.setFontSize(10)
      this.doc.setFont("helvetica", "bold")
      this.doc.text(`Ödeme #${index + 1}`, this.margin + 15, this.currentY + 8)

      this.doc.setFontSize(8)
      this.doc.setFont("helvetica", "normal")
      this.doc.setTextColor(107, 114, 128)
      this.doc.text(
        new Date(payment.payment_date).toLocaleDateString("tr-TR", {
          year: "numeric",
          month: "long",
          day: "numeric",
        }),
        this.margin + 15,
        this.currentY + 15,
      )

      // Amount
      this.doc.setTextColor(16, 185, 129)
      this.doc.setFontSize(12)
      this.doc.setFont("helvetica", "bold")
      this.doc.text(this.formatCurrency(payment.amount), this.pageWidth - this.margin - 5, this.currentY + 10, {
        align: "right",
      })

      this.currentY += 25
    })
  }

  // Özet istatistikler
  private addSummaryStats(data: CreditReportData) {
    this.checkPageBreak(60)

    // Section title
    this.doc.setTextColor(31, 41, 55)
    this.doc.setFontSize(18)
    this.doc.setFont("helvetica", "bold")
    this.doc.text("OZET ISTATISTIKLER", this.margin, this.currentY)
    this.currentY += 20

    // Calculate stats
    const totalPaid = data.paymentHistory.reduce((sum, p) => sum + p.amount, 0)
    const totalInterest = data.paymentPlans.reduce((sum, p) => sum + p.interest_amount, 0)
    const totalPrincipal = data.paymentPlans.reduce((sum, p) => sum + p.principal_amount, 0)

    // Stats grid
    const stats = [
      { label: "Toplam Odenen", value: this.formatCurrency(totalPaid), icon: "💰" },
      { label: "Toplam Faiz", value: this.formatCurrency(totalInterest), icon: "📈" },
      { label: "Ana Para", value: this.formatCurrency(totalPrincipal), icon: "🏦" },
      { label: "Odeme Sayisi", value: data.paymentHistory.length.toString(), icon: "📊" },
    ]

    const cardWidth = (this.pageWidth - 2 * this.margin - 30) / 2
    const cardHeight = 25

    stats.forEach((stat, index) => {
      const row = Math.floor(index / 2)
      const col = index % 2
      const x = this.margin + col * (cardWidth + 10)
      const y = this.currentY + row * (cardHeight + 10)

      // Card background with gradient effect
      this.doc.setFillColor(248, 250, 252) // Slate-50
      this.doc.roundedRect(x, y, cardWidth, cardHeight, 5, 5, "F")

      // Card border
      this.doc.setDrawColor(226, 232, 240) // Slate-200
      this.doc.setLineWidth(0.5)
      this.doc.roundedRect(x, y, cardWidth, cardHeight, 5, 5, "S")

      // Icon area
      this.doc.setFillColor(20, 184, 166)
      this.doc.roundedRect(x + 5, y + 5, 15, 15, 3, 3, "F")

      // Content
      this.doc.setTextColor(107, 114, 128)
      this.doc.setFontSize(9)
      this.doc.setFont("helvetica", "normal")
      this.doc.text(stat.label, x + 25, y + 10)

      this.doc.setTextColor(31, 41, 55)
      this.doc.setFontSize(12)
      this.doc.setFont("helvetica", "bold")
      this.doc.text(stat.value, x + 25, y + 18)
    })

    this.currentY += 60
  }

  // Utility methods
  private formatCurrency(amount: number): string {
    return (
      amount.toLocaleString("en-US", {
        minimumFractionDigits: 0,
        maximumFractionDigits: 0,
      }) + " TL"
    )
  }

  private getStatusText(status: string): string {
    const statusMap = {
      paid: "Odendi",
      pending: "Bekliyor",
      overdue: "Gecikti",
    }
    return statusMap[status as keyof typeof statusMap] || "Unknown"
  }

  private getStatusColor(status: string): string {
    const colorMap = {
      paid: colors.success,
      pending: colors.warning,
      overdue: colors.danger,
    }
    return colorMap[status as keyof typeof colorMap] || colors.medium
  }

  // Ana generate metodu
  public generate(data: CreditReportData): void {
    // İlk sayfa - header ve footer ekle
    this.addHeader()
    this.addFooter()

    // Kapak sayfası
    this.addCoverPage(data)

    // Yeni sayfa - Ödeme planı
    this.addNewPage()
    this.addPaymentPlanTable(data.paymentPlans)

    // Ödeme geçmişi
    if (data.paymentHistory.length > 0) {
      this.addPaymentHistory(data.paymentHistory)
    }

    // Özet istatistikler
    this.addSummaryStats(data)

    // PDF'i indir
    this.doc.save(`kredi-raporu-${data.credit.credit_code}.pdf`)
  }
}

// Export function
export async function generateCreditReport(data: CreditReportData): Promise<void> {
  const generator = new ElitePDFGenerator()
  generator.generate(data)
}
